apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

Properties buildProperties = new Properties()
buildProperties.load(new BufferedReader(new InputStreamReader(new FileInputStream("app/confs/wallet.properties"), "UTF8")))

androidExtensions {
    experimental = true
}

def computeVersionCode() {
    ext.buildNumber = System.getenv("BUILD_NUMBER") ?: 21
    return "$buildNumber".toInteger()
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId buildProperties.get("application_id")
        minSdkVersion 23
        targetSdkVersion 28
        versionCode computeVersionCode()
        versionName "0.10.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue "string", "localizations", buildProperties.get("localizations")

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            resValue "string", "infuraProjectId", "2a1306f1d12f4c109a4d4fb9be46b02e"
            resValue "string", "infuraSecretKey", "fc479a9290b64a84a15fa6544a130218"
            resValue "string", "etherscanKey", "GKNHXT22ED7PRVCKZATFZQD1YI7FK9AAYE"
            resValue "string", "is_release", "false"
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "infuraProjectId", ""
            resValue "string", "infuraSecretKey", ""
            resValue "string", "etherscanKey", ""
            resValue "string", "is_release", "true"
        }
    }

    flavorDimensions "network"
    productFlavors {
        devTestnet {
            buildConfigField "boolean", "testMode", "true"
            applicationIdSuffix ".dev.testnet"
        }
        devMainnetMaster {
            buildConfigField "boolean", "testMode", "false"
            applicationIdSuffix ".dev.master"
        }
        devMainnetVersion {
            buildConfigField "boolean", "testMode", "false"
            applicationIdSuffix ".dev.version"
        }
        productionMainnet {
            buildConfigField "boolean", "testMode", "false"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    def lifecycle_version = '2.2.0-beta01'
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // Room
    def room_version = '2.2.0'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // alternately - if using Java8, use the following instead of compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    implementation 'androidx.recyclerview:recyclerview:1.1.0-beta05'

    implementation 'com.aurelhubert:ahbottomnavigation:2.3.4'
    implementation 'com.google.android.material:material:1.1.0-beta01'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    // (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)
    implementation 'io.reactivex.rxjava2:rxjava:2.2.11'
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "androidx.biometric:biometric:1.0.0-rc01"
    //ViewPager circle indicator
    implementation 'me.relex:circleindicator:2.1.4'

    api 'com.aurelhubert:ahbottomnavigation:2.3.4'
    api "org.jetbrains.anko:anko-commons:0.10.8"

    api 'com.journeyapps:zxing-android-embedded:3.6.0'

    // WorkManager Kotlin
    def work_version = "2.2.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // WorkManager RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'

    // Wallet kits
    implementation 'com.github.horizontalsystems:bitcoin-kit-android:2fdd93e'
    implementation 'com.github.horizontalsystems:ethereum-kit-android:c03f4ba'
    implementation 'com.github.horizontalsystems:blockchain-fee-rate-kit-android:15df939'
    implementation 'com.github.horizontalsystems:hd-wallet-kit-android:68903dc'
    implementation 'com.github.horizontalsystems:binance-chain-kit-android:809e1a5'
    implementation 'com.github.horizontalsystems:xrates-kit-android:11d925a'
    implementation('com.github.horizontalsystems:eos-kit-android:fdee6ab') {
        exclude group: 'com.google.protobuf'
    }

    androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'

    // optional - Test helpers for LiveData
    testImplementation 'junit:junit:4.12'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'com.nhaarman:mockito-kotlin-kt1.1:1.6.0'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.2'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.2'

    // Spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:2.0.6"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.6"
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
